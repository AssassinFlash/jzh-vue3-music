    const store = useStore() // 拿到store实例，拿到state的全局变量
    // 用计算属性使得变量依赖于全局变量的修改而发生变化
    const fullScreen = computed(() => store.state.fullScreen)
    const currentSong = computed(() => store.getters.currentSong)
    // 当前歌曲索引
    const currentIndex = computed(() => store.state.currentIndex)
    // 歌曲播放列表
    const playlist = computed(() => store.state.playlist)
    // 拿到audio的DOM
    const audioRef = ref(null)
    // 监听currentSong的变化，拿到变化后新歌曲的url赋值给audio标签
    watch(currentSong, (newSong) => {
      if (!newSong.id || !newSong.url) {
        return
      }
      // 歌曲切换的时候要设置歌曲准备状态为false，给音频组件一个缓冲时间
      songReady.value = false
      const audioEl = audioRef.value
      audioEl.src = newSong.url
      audioEl.play()
    })

    const playing = computed(() => store.state.playing)
    // 根据歌曲是否播放更改播放图标
    const playIcon = computed(() => {
      return playing.value ? 'icon-pause' : 'icon-play'
    })
    // 监听播放状态，与audio做联动
    watch(playing, (newPlaying) => {
      if (songReady.value) {
        const audioEl = audioRef.value
        // 更改后的playing状态为true，表示要开始播放歌曲了
        newPlaying ? audioEl.play() : audioEl.pause()
      }
    })

    // 歌曲是否准备好播放
    const songReady = ref(false)
    // 控制播放器样式，当歌曲还没准备好播放时禁用图标
    const disableCls = computed(() => {
      return songReady.value ? '' : 'disable'
    })

    // 歌曲缓冲好的回调函数
    function ready () {
      if (!songReady.value) {
        songReady.value = true
      }
    }

    // 如果歌曲出错了，要设置歌曲准备状态为true，这样其他函数比如下一首上一首等的判断逻辑才能通过
    function error () {
      songReady.value = true
    }

    // 点击播放按钮
    function togglePlay () {
      if (songReady.value) {
        store.commit('setPlayingState', !playing.value)
      }
    }

    // 音频的pause事件
    function pause () {
      store.commit('setPlayingState', false)
    }

    // 点击上一首
    function prev () {
      const list = playlist.value
      // 若列表没有歌曲，不能执行逻辑
      if (songReady.value && list.length) {
        // 若列表只有一首歌，不更改index
        if (list.length === 1) {
          loop()
        } else {
          let index = currentIndex.value - 1
          // 若当前播放歌曲已经是第一首歌，那点击上一首就要将当前歌曲索引变成歌曲播放列表的最后一首歌
          if (index === -1) {
            index = list.length - 1
          }
          store.commit('setCurrentIndex', index)
          // 如果当前播放歌曲处于暂停状态，转成上一首后要自动播放
          if (!playing.value) {
            store.commit('setPlayingState', true)
          }
        }
      }
    }

    // 点击下一首
    function next () {
      const list = playlist.value
      if (songReady.value && list.length) {
        if (list.length === 1) {
          loop()
        } else {
          let index = currentIndex.value + 1
          // 若当前播放歌曲是最后一首歌，点击下一首就要将当前歌曲索引变成歌曲播放列表的第一首歌
          if (index === list.length) {
            index = 0
          }
          store.commit('setCurrentIndex', index)
          if (!playing.value) {
            store.commit('setPlayingState', true)
          }
        }
      }
    }

    // 循环播放
    function loop () {
      const audioEl = audioRef.value
      // 把音频组件的当前播放时间改为0，不断从头播放
      audioEl.currentTime = 0
      audioEl.play()
    }

    // 点击收缩按钮
    function goBack () {
      store.commit('setFullscreen', false)
    }

    return {
      fullScreen,
      currentSong,
      playIcon,
      audioRef,
      goBack,
      ready,
      disableCls,
      error,
      togglePlay,
      pause,
      prev,
      next
    }


// 存储数组到localStorage的封装
import storage from 'good-storage'

export function save (item, key, compare, maxLen) {
  // 首先从localStorage中取出收藏歌曲数组，若没有就默认空数组
  const items = storage.get(key, [])
  // 把新加入收藏的歌曲加入到收藏歌曲数组中
  // 判断：如果新传来的歌曲已经在收藏歌曲数组中，就不需要再插入了
  insertArray(items, item, compare, maxLen)
  storage.set(key, items)
  return items
}

export function remove (key, compare) {
  const items = storage.get(key, [])
  deleteFromArray(items, compare)
  storage.set(key, items)
  return items
}

// 封装判断逻辑的函数，传过来比较的逻辑，进行数组插入
// 比较逻辑中已经包含了新传来的歌曲的数据，所以不需要额外传
function insertArray (arr, val, compare, maxLen) {
  // 查找收藏歌曲数组中是否已存在新传来的歌曲
  const index = arr.findIndex(compare)
  if (index > -1) {
    return
  }
  // 数组传参，对数组进行修改是对原数组进行了修改，所以不用返回数组
  arr.unshift(val)
  if (maxLen && arr.length > maxLen) {
    arr.pop()
  }
}

// 封装判断逻辑，传过来比较的逻辑，进行数组删除
function deleteFromArray (arr, compare) {
  const index = arr.findIndex(compare)
  if (index > -1) {
    arr.splice(index, 1)
  }
}


// 收藏功能的实现
import { useStore } from 'vuex'
import { computed } from 'vue'
import { remove, save } from '@/assets/js/array-store'
import { FAVORITE_KEY } from '@/assets/js/constant'

export default function useFavorite () {
  // data
  const maxLen = 100 // 收藏歌曲数组最大长度

  // vuex
  const store = useStore()
  const favoriteList = computed(() => store.state.favoriteList) // 收藏歌曲数组

  // methods
  // 收藏图标样式
  function getFavoriteIcon (song) {
    return isFavorite(song) ? 'icon-favorite' : 'icon-not-favorite'
  }

  // 点击收藏按钮
  function toggleFavorite (song) {
    let list

    function compare (item) {
      return item.id === song.id
    }

    if (isFavorite(song)) {
      // 新传来的歌曲已存在收藏歌曲数组
      // remove
      list = remove(FAVORITE_KEY, compare)
    } else {
      list = save(song, FAVORITE_KEY, compare, maxLen)
    }
    store.commit('setFavoriteList', list)
  }

  // 判断歌曲是否已被收藏
  function isFavorite (song) {
    const index = favoriteList.value.findIndex(item => {
      return item.id === song.id
    })
    return index > -1
  }

  return {
    getFavoriteIcon,
    toggleFavorite
  }
}
